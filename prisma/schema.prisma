generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  address   String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]

  @@index([email])
  @@index([phone])
}

model Product {
  id               Int         @id @default(autoincrement())
  name             String
  description      String?
  rawPrice         Decimal    // Base cost from supplier
  totalPrice       Decimal    // Final price with margin
  printCost        Decimal?   // Optional print cost
  packagingCost    Decimal?   // Optional packaging cost
  shippingCost     Decimal?   // Optional shipping cost
  laborCost        Decimal?   // Optional labor cost
  marginPercentage Int?       // Optional margin percentage (default 30%)
  sku              String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  categoryId       Int
  providerId       Int
  inventory        Inventory?
  orderItems       OrderItem[] @relation("ProductOrderItem")
  printItems       OrderItem[] @relation("PrintOrderItem")
  category         Category    @relation(fields: [categoryId], references: [id])
  provider         Provider    @relation(fields: [providerId], references: [id])
}

model Order {
  id                 Int         @id @default(autoincrement())
  orderDate          DateTime?
  orderNumber        String      @unique
  productionStatus   String?
  description        String?
  totalCost          Decimal?
  finalCustomerPrice Decimal?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  customerId         Int
  expenses           Expense[]
  customer           Customer    @relation(fields: [customerId], references: [id])
  orderItems         OrderItem[]

  @@index([orderNumber])
  @@index([productionStatus])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Provider {
  id            Int       @id @default(autoincrement())
  name          String
  contactPerson String?
  email         String?
  phone         String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]
}

model Inventory {
  id              Int      @id @default(autoincrement())
  quantity        Int
  minimumQuantity Int
  location        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  productId       Int      @unique
  product         Product  @relation(fields: [productId], references: [id])
}

model OrderItem {
  id               Int      @id @default(autoincrement())
  quantity         Int
  unitPrice        Decimal  // Base unit price at time of order
  total            Decimal  // Total price for this item

  // Pricing components snapshot at time of order
  baseCost         Decimal  // Base cost from supplier
  printCost        Decimal? // Optional print cost
  packagingCost    Decimal? // Optional packaging cost
  shippingCost     Decimal? // Optional shipping cost
  laborCost        Decimal? // Optional labor cost
  marginPercentage Int?     // Margin percentage used

  confirmed        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  orderId          Int
  productId        Int
  printId          Int?
  order            Order    @relation(fields: [orderId], references: [id])
  product          Product  @relation("ProductOrderItem", fields: [productId], references: [id])
  print            Product? @relation("PrintOrderItem", fields: [printId], references: [id])
}

model Expense {
  id             Int      @id @default(autoincrement())
  description    String?
  date           DateTime
  movementType   String
  rawValue       Decimal
  hasIva         Boolean  @default(false)
  discountAmount Decimal?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  orderId        Int?
  order          Order?   @relation(fields: [orderId], references: [id])
}
